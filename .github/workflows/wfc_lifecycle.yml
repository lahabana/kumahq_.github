on:
  workflow_call:
    inputs:
      openLabels:
        description: "A comma separated list of labels to add"
        type: string
        default: "triage/pending"
        required: false
      acceptedLabel:
        description: "The label to use when an issue is accepted work"
        type: string
        default: "triage/accepted"
        required: false
      openComment:
        type: string
        description: "An optional comment to add to the issue"
        default: ""
        required: false
      autocloseLabels:
        description: "A comma separated list of labels that indicates an issue should be closed"
        type: string
        required: false
        default: "triage/rotten,triage/duplicated,triage/not-reproducible"
      autocloseComment:
        type: string
        description: "A comment to add to the issue when autoclosing"
        default: |
          Automatically closing the issue due to having one of the "closed state label".
        required: false
      daysBeforeStale:
        description: "The number of days an issue has to be unmodified before being applied the labels"
        type: number
        default: 90
        required: false
      staleLabel:
        description: "A label to add when an issue is staled"
        type: string
        default: "triage/stale"
        required: false
      staleComment:
        type: string
        description: "A comment to add to the issue when marking as stale"
        default: |
          This issue was inactive for 90 days. It will be reviewed in the next triage meeting and might be closed.
          If you think this issue is still relevant, please comment on it or attend the next triage meeting.
        required: false
      filesToSync:
        type: string
        description: "The list of files to sync from the community repo"
        required: false
        default: "CODE_OF_CONDUCT.md,LICENSE,SECURITY.md,meta_org.yml,CODEOWNERS"
      filesToIgnore:
        type: string
        description: "list of files to ignore from syncing from the community repo"
        required: false
        default: ""

jobs:
  open:
    if: (github.event.action == 'reopened' || github.event.action == 'opened')
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - name: add labels
        if: "!contains(github.event.issue.labels.*.name, inputs.acceptedLabel)"
        run: |
          gh issue edit ${{ github.event.issue.number }} --add-label ${{ inputs.openLabels }} -R ${{ github.repository }}
      - name: add comment
        if: inputs.openComment && !contains(github.event.issue.labels.*.name, inputs.acceptedLabel)
        run: |
          gh issue comment ${{ github.event.issue.number }} -R ${{ github.repository }} --body "$COMMENT"
        env:
          COMMENT: ${{ inputs.openComment }}
  autoclose:
    if: github.event.action == 'labeled' && contains(inputs.autocloseLabels, github.event.label.name)
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - name: comment on issue
        if: github.event.issue.state != 'closed'
        run: |
          gh issue comment ${{ github.event.issue.number }} -R ${{ github.repository }} --body "$COMMENT"
        env:
          COMMENT: ${{ inputs.autocloseComment }}
      - name: close issues marked with label
        run: |
          gh issue edit ${{ github.event.issue.number }} --remove-label ${{ inputs.openLabels }} -R ${{ github.repository }}
          gh api -X PATCH repos/${{ github.repository }}/issues/${{ github.event.issue.number }} -f state=closed -f state_reason=not_planned
  periodicCleanup:
    needs: syncMeta
    if: github.event.workflow || github.event.schedule
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - name: mark issues as stale
        run: |
          if ! gh issue list --limit 1 --repo ${{ github.repository }} > /dev/null 2>&1; then
            exit 0
          fi

          before=`date -d '${{ inputs.daysBeforeStale }} days ago' --iso-8601`
          echo "Getting all issues untouched since: $before"
          issues=`gh issue list -S "-label:${{ inputs.staleLabel }} updated:<$before" -s open -R ${{ github.repository }} --json number -t '{{range .}}{{.number}} {{end}}'`
          echo "Updating `echo $issues | wc -w` issues"
          for issue in $issues; do
            gh issue edit $issue --add-label ${{ inputs.staleLabel }} -R ${{ github.repository }}
            gh issue comment $issue -R ${{ github.repository }} --body "$COMMENT"
          done
        env:
          COMMENT: ${{ inputs.staleComment }}
      - name: close issues marked with label
        if: inputs.autocloseLabels
        run: |
          if ! gh issue list --limit 1 --repo ${{ github.repository }} > /dev/null 2>&1; then
            exit 0
          fi

          issues=`gh issue list -S "label:${{ inputs.autocloseLabels }}" -s open -R ${{ github.repository }} --json number -t '{{range .}}{{.number}} {{end}}'`
          echo "Auto closing issues `echo $issues | wc -w` issues"
          for issue in $issues; do
            gh issue edit $issue --remove-label ${{ inputs.openLabels }} -R ${{ github.repository }}
            gh issue comment $issue -R ${{ github.repository }} --body "$COMMENT"
            gh issue close $issue -R ${{ github.repository }}
          done
        env:
          COMMENT: ${{ inputs.autocloseComment }}
  syncMeta:
    if: github.event.workflow || github.event.schedule
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: install gh groomer
        run: |
          if git diff --name-only  "@{24 hours ago}" "@{now}" -- org_labels.yml labels.yml; then
            echo "Label files didn't change skipping label sync"
          fi

          gh release download -R lahabana/github-pm-groomer -p '*Linux_x86*'
          tar -xf github-pm-groomer_*_Linux_x86_64.tar.gz
          # Kept for backward compatibility
          if [[ -f org_labels.yml ]]; then
            echo "Syncing org labels"
            ./github-pm-groomer label-sync -p org_labels.yml -r ${{ github.repository }}
          fi
          if [[ -f labels.yml ]]; then
            echo "Syncing repo labels"
            ./github-pm-groomer label-sync -p labels.yml -r ${{ github.repository }}
          fi
          if [[ -f meta_org.yml ]]; then
            echo "Syncing org meta"
            ./github-pm-groomer meta-sync -p meta_org.yml -r ${{ github.repository }}
          fi
          if [[ -f meta_repo.yml ]]; then
            echo "Syncing repo meta"
            ./github-pm-groomer meta-sync -p meta_repo.yml -r ${{ github.repository }}
          fi
        env:
          GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  syncFilesFromGithub:
    if: (github.event.workflow || github.event.schedule) && github.repository != 'kumahq/.github'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Sync files from kumahq/.github
        run: |
          for f in `echo '${{ inputs.filesToSync }}' | tr "," " "`; do
            if echo ',${{ inputs.filesToIgnore }},' | grep -q ",${f},"; then
              echo "${f} is ignored, not syncing it"
            else
              gh api /repos/kumahq/.github/contents/${f}  -t '{{.content}}' | base64 -d > ${f}
            fi
          done
      - name: "Create Pull Request"
        uses: peter-evans/create-pull-request@v3
        id: newPR
        with:
          path: .
          commit-message: "ci(.github): automatic sync of files in kumahq/.github"
          committer: GitHub <noreply@github.com>
          author: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
          signoff: true
          branch: chore/upgrade-githubfiles
          delete-branch: true
          title: "ci(.github): automatic sync of files in kumahq/.github"
          body: "Automatic sync of files from https://github.com/kumahq/.github."
          draft: false
